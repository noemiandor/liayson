dmPri[,dummySNVcols[j]]=dmPri[,'startpos'];
}
}
}
##Add optional columns if they don't exist
cbsPri = .addMissingCols(cbsPri)
dmPri = .addMissingCols(dmPri)
dmPris[[i]] = dmPri
allCBS = as.matrix(rbind(allCBS, cbsPri))
allDM = as.matrix(rbind(allDM, dmPri))
allCBS[, "Count"] = c(1:nrow(allCBS))
allDM[, "Count"] = c(1:nrow(allDM))
}
dupI = which(duplicated(allCBS[, c("chr", "startpos", "endpos")]))
if (length(dupI) > 0) {
allCBS = allCBS[-1 * dupI, ]
}
dupI = which(duplicated(allDM[, c("chr", "startpos")]))
if (length(dupI) > 0) {
allDM = allDM[-1 * dupI, ]
}
aqCBS = allCBS[, cols]
aqDM = allDM[, cols]
i
allCBS = as.matrix(rbind(allCBS, cbsPri))
allDM = as.matrix(rbind(allDM, dmPri))
allDM[1:5,]
dmPri[1:5,]
samGr$cbs[[i]]
samGr$cbs[[i-1]]
f
cbs
cbs=gsub(".sps",".cbs",f)
cbs
dm=read.table(f,sep="\t",header=T,check.names = F)
dm=as.matrix(dm[,c("chr","startpos","AF_Tumor","PN_B")])
out=runExPANdS(dm,cbs,snvF = fileparts(f)$name)
dm=read.table(f,sep="\t",header=T,check.names = F)
dm=as.matrix(dm[,c("chr","startpos","AF_Tumor","PN_B")])
out=runExPANdS(dm,cbs,snvF = fileparts(f)$name,max_PM = 8)
dm=read.table(f,sep="\t",header=T,check.names = F)
dm=as.matrix(dm[,c("chr","startpos","AF_Tumor","PN_B")])
out=runExPANdS(dm,cbs,snvF = fileparts(f)$name,max_PM = 18)
cbs=gsub(".sps",".cbs",f)
dm=read.table(f,sep="\t",header=T,check.names = F)
dm=as.matrix(dm[,c("chr","startpos","AF_Tumor","PN_B","quantityID","CN_Estimate")])
out=runExPANdS(dm,cbs,snvF = fileparts(f)$name)
#The CBS files for each sample:
cbs=as.list(paste(patient, samples,'.cbs',sep=""));
#The SP files for each sample (previously calculated via runExPANdS-function):
sps=as.list(paste(patient, samples,'.sps',sep=""));
sampleGroup=list(cbs=cbs,sps=sps,labels=samples)
tr=buildMultiSamplePhylo(sampleGroup,output,ambig = F, plotF=0);
tr
if(!is.na(spRes) && !spRes){
print("Warning: Calculating cross-sample phylogeny at metapopulation resolution")
}
cols = c("Count", "chr", "startpos", "endpos",  "CN_Estimate")
dummySNVcols=c("Count","endpos","Clone");
allCBS = c()
allDM = c()
dmPris=list();
n_Samples = length(samGr$labels)
for (i in 1:n_Samples) {
cbsPri = read.table(samGr$cbs[[i]], sep = "\t",
header = T, stringsAsFactors = FALSE)
cbsPri[, c("startpos", "endpos")] = round(cbsPri[, c("startpos",
"endpos")]/10000) * 10000
dmPri = read.table(samGr$sps[[i]], sep = "\t",
header = T, stringsAsFactors = FALSE)
tmpI=grep("SP_0", colnames(dmPri));
if (!isempty(tmpI)){
dmPri=dmPri[,-1*tmpI]; ##remove SP composition specific columns
}
if(!is.na(spRes) && !spRes){
dmPri[,"SP"]=max(dmPri[,"SP"],na.rm=T);
if(any("SP_cnv" %in% colnames(dmPri))){ ##Backward compatibility
dmPri[,"SP_cnv"]=max(dmPri[,"SP"],na.rm=T);
}
}
for (j in 1:length( dummySNVcols)){
if (!any(colnames(dmPri)==dummySNVcols[j])){
tmp=colnames(dmPri);
dmPri=cbind(dmPri,matrix(NA,nrow(dmPri),1));
colnames(dmPri)=c(tmp,dummySNVcols[j]);
if(dummySNVcols[j]=='endpos'){
dmPri[,dummySNVcols[j]]=dmPri[,'startpos'];
}
}
}
##Add optional columns if they don't exist
cbsPri = .addMissingCols(cbsPri)
dmPri = .addMissingCols(dmPri)
dmPris[[i]] = dmPri
allCBS = as.matrix(rbind(allCBS, cbsPri))
allDM = as.matrix(rbind(allDM, dmPri))
allCBS[, "Count"] = c(1:nrow(allCBS))
allDM[, "Count"] = c(1:nrow(allDM))
}
dupI = which(duplicated(allCBS[, c("chr", "startpos", "endpos")]))
if (length(dupI) > 0) {
allCBS = allCBS[-1 * dupI, ]
}
dupI = which(duplicated(allDM[, c("chr", "startpos")]))
if (length(dupI) > 0) {
allDM = allDM[-1 * dupI, ]
}
aqCBS = allCBS[, cols]
aqDM = allDM[, cols]
i=1
dmPri = dmPris[[i]];
print(paste("Processing sample ", i, " out of ",n_Samples,sep=""));
aQpriCBS = try(assignQuantityToSP(cbs = allCBS[, cols], dm = dmPri, C=list(sps=c("SP"),pms = c("PM")), ambig = ambig), silent = FALSE)
dmPri[, "PM_B"] = sign(dmPri[, "PM_B"])
aQpriDM = try(assignQuantityToSP(cbs = allDM[, cols], dm = dmPri, C=list(sps=c("SP"),pms = c("PM_B"))), silent = FALSE)
firstI = min(grep("SP", colnames(aQpriCBS)))
aqCBS = cbind(aqCBS, aQpriCBS[, firstI:ncol(aQpriCBS)])
aqDM = cbind(aqDM, aQpriDM[, firstI:ncol(aQpriDM)])
nSPs = length(unique(dmPri[!is.na(dmPri[, "SP"]), "SP"]))
lab = paste(samGr$labels[[i]], "_SP", sep = "")
colns = colnames(aQpriDM)
colnames(aqCBS) = c(colnames(aqCBS[, 1:(ncol(aqCBS) -
nSPs)]), gsub("SP", lab, colns[firstI:ncol(aQpriDM)]))
dmPri = dmPris[[i]];
print(paste("Processing sample ", i, " out of ",n_Samples,sep=""));
aQpriCBS = try(assignQuantityToSP(cbs = allCBS[, cols], dm = dmPri, C=list(sps=c("SP"),pms = c("PM")), ambig = ambig), silent = FALSE)
dmPri = dmPris[[i]];
print(paste("Processing sample ", i, " out of ",n_Samples,sep=""));
aQpriCBS = try(assignQuantityToSP(cbs = allCBS[, cols], dm = dmPri, C=list(sps=c("SP","SP_cnv"),pms = c("PM",PM_cnv)), ambig = ambig), silent = FALSE)
dmPri = dmPris[[i]];
print(paste("Processing sample ", i, " out of ",n_Samples,sep=""));
aQpriCBS = try(assignQuantityToSP(cbs = allCBS[, cols], dm = dmPri, C=list(sps=c("SP","SP_cnv"),pms = c("PM","PM_cnv")), ambig = ambig), silent = FALSE)
dmPri = dmPris[[i]];
print(paste("Processing sample ", i, " out of ",n_Samples,sep=""));
aQpriCBS = try(assignQuantityToSP(cbs = allCBS[, cols], dm = dmPri,  ambig = ambig), silent = FALSE)
allCBS[1:5, cols]
dmPri[1:5,]
cbs=allCBS[, cols]; dm=dmPri; C=list(sps=c("SP"),pms = c("PM")); ambig = F
print("Assigning copy number to SPs...")
dm[, C$sps]=round(1000*dm[, C$sps])/1000
sps = sort(unique(as.numeric(dm[, C$sps])))
cols = c( colnames(cbs), paste("SP_", as.character(unique(sps)), sep = "") )
ploidy = matrix(cbind(cbs, matrix(NaN, nrow(cbs), length(sps))),
nrow = nrow(cbs), ncol = length(cols), dimnames = list(1:nrow(cbs), cols))
toD = c();  allAssigned=c();
for (k in 1:nrow(ploidy)) {
if (mod(k, 100) == 0) {
print(paste("Finding overlaps for CBS segment", k, "out of ", nrow(ploidy), "..."))
}
idx = which(dm[, "chr"] == ploidy[k, "chr"] & dm[, "startpos"] >=
ploidy[k, "startpos"] & dm[, "startpos"] <= ploidy[k, "endpos"])
if (length(idx) == 0) {
next
}
for (j in idx) { ##For each mutated locus
dmx = dm[j, ]
for(cI in 1:length(C$sps)){ ##For each subpopulation affected by this locus
if (is.na(C$sps[cI])) {
next
}
sp = paste("SP_", dmx[C$sps[cI]], sep = "")
thisAssigned=c(k,dmx[C$sps[cI]] ,ploidy[k,"chr"],ploidy[k,"startpos"],ploidy[k,"endpos"],dmx[C$pms[cI]]);
allAssigned = rbind(allAssigned, thisAssigned)
if (is.na(ploidy[k, sp]) || ploidy[k, sp] == as.double(dmx[C$pms[cI]])) {
ploidy[k, sp] = as.double(dmx[C$pms[cI]])
} else {
toD = rbind(toD, thisAssigned)
}
}
}
}
##Either remove ambiguous segments or calculate their median ploidy based on SNV ploidy
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
toD=matrix(toD,nrow=nrow(toD),ncol=ncol(toD),dimnames=list(
rows=c(1:nrow(toD)),cols=c("Idx","SP","chr","startpos","endpos",colName)))
colnames(allAssigned)=colnames(toD)
uD=unique(toD);
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[uD[i,"Idx"],sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
toD
toD=matrix(toD,nrow=nrow(toD),ncol=ncol(toD),dimnames=list(
rows=c(1:nrow(toD)),cols=c("Idx","SP","chr","startpos","endpos",colName)))
colnames(allAssigned)=colnames(toD)
uD=unique(toD);
i
sp = paste("SP_", uD[i,"SP"], sep = "")
sp
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ii
ploidy[uD[i,"Idx"],sp]
ploidy[,sp]
uD[i,"Idx"]
uD
class(toD)
class(unique(toD))
toD[1:5,]
uD[i,"Idx"]
uD$cols[i,"Idx"]
uD
uD[i,"Idx"]
class(uD[i,"Idx"])
unlist(uD[i,"Idx"])
class(uD)
uD
as.matrix(uD)
as.matrix(toD)
as.matrix(toD[1:5])
as.matrix(toD[1:5,])
as.matrix(toD[1:5,"Idx"])
as.matrix(toD[1,"Idx"])
as.matrix(uD[1,"Idx"])
i
as.matrix(uD[i,"Idx"])
ploidy[uD[i,"Idx"],sp]
uD[i,"Idx"]
toD[i,"Idx"]
toD[i,"Idx",drop=F]
uD[i,"Idx",drop=F]
names(toD)
slotnames(toD)
slotNames(toD)
toD[1:5,]
toD=as.matrix(toD)
##Either remove ambiguous segments or calculate their median ploidy based on SNV ploidy
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
toD=matrix(toD,nrow=nrow(toD),ncol=ncol(toD),dimnames=list(
rows=c(1:nrow(toD)),cols=c("Idx","SP","chr","startpos","endpos",colName)))
colnames(allAssigned)=colnames(toD)
uD=unique(toD);
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[uD[i,"Idx"],sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
toD[i,"Idx"]
toD=as.data.frame(toD)
toD[i,"Idx"]
toD[1:5,]
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
toD=matrix(toD,nrow=nrow(toD),ncol=ncol(toD),dimnames=list(
rows=c(1:nrow(toD)),cols=c("Idx","SP","chr","startpos","endpos",colName)))
colnames(allAssigned)=colnames(toD)
uD=unique(toD);
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[uD[i,"Idx"],sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
uD[i,"Idx"]
print("Assigning copy number to SPs...")
dm[, C$sps]=round(1000*dm[, C$sps])/1000
sps = sort(unique(as.numeric(dm[, C$sps])))
cols = c( colnames(cbs), paste("SP_", as.character(unique(sps)), sep = "") )
ploidy = matrix(cbind(cbs, matrix(NaN, nrow(cbs), length(sps))),
nrow = nrow(cbs), ncol = length(cols), dimnames = list(1:nrow(cbs), cols))
toD = c();  allAssigned=c();
for (k in 1:nrow(ploidy)) {
if (mod(k, 100) == 0) {
print(paste("Finding overlaps for CBS segment", k, "out of ", nrow(ploidy), "..."))
}
idx = which(dm[, "chr"] == ploidy[k, "chr"] & dm[, "startpos"] >=
ploidy[k, "startpos"] & dm[, "startpos"] <= ploidy[k, "endpos"])
if (length(idx) == 0) {
next
}
for (j in idx) { ##For each mutated locus
dmx = dm[j, ]
for(cI in 1:length(C$sps)){ ##For each subpopulation affected by this locus
if (is.na(C$sps[cI])) {
next
}
sp = paste("SP_", dmx[C$sps[cI]], sep = "")
thisAssigned=c(k,dmx[C$sps[cI]] ,ploidy[k,"chr"],ploidy[k,"startpos"],ploidy[k,"endpos"],dmx[C$pms[cI]]);
allAssigned = rbind(allAssigned, thisAssigned)
if (is.na(ploidy[k, sp]) || ploidy[k, sp] == as.double(dmx[C$pms[cI]])) {
ploidy[k, sp] = as.double(dmx[C$pms[cI]])
} else {
toD = rbind(toD, thisAssigned)
}
}
}
}
toD=matrix(toD,nrow=nrow(toD),ncol=ncol(toD),dimnames=list(
rows=c(1:nrow(toD)),cols=c("Idx","SP","chr","startpos","endpos",colName)))
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
uD[1:5,]
print("Assigning copy number to SPs...")
dm[, C$sps]=round(1000*dm[, C$sps])/1000
sps = sort(unique(as.numeric(dm[, C$sps])))
cols = c( colnames(cbs), paste("SP_", as.character(unique(sps)), sep = "") )
ploidy = matrix(cbind(cbs, matrix(NaN, nrow(cbs), length(sps))),
nrow = nrow(cbs), ncol = length(cols), dimnames = list(1:nrow(cbs), cols))
toD = c();  allAssigned=c();
for (k in 1:nrow(ploidy)) {
if (mod(k, 100) == 0) {
print(paste("Finding overlaps for CBS segment", k, "out of ", nrow(ploidy), "..."))
}
idx = which(dm[, "chr"] == ploidy[k, "chr"] & dm[, "startpos"] >=
ploidy[k, "startpos"] & dm[, "startpos"] <= ploidy[k, "endpos"])
if (length(idx) == 0) {
next
}
for (j in idx) { ##For each mutated locus
dmx = dm[j, ]
for(cI in 1:length(C$sps)){ ##For each subpopulation affected by this locus
if (is.na(C$sps[cI])) {
next
}
sp = paste("SP_", dmx[C$sps[cI]], sep = "")
thisAssigned=c(k,dmx[C$sps[cI]] ,ploidy[k,"chr"],ploidy[k,"startpos"],ploidy[k,"endpos"],dmx[C$pms[cI]]);
allAssigned = rbind(allAssigned, thisAssigned)
if (is.na(ploidy[k, sp]) || ploidy[k, sp] == as.double(dmx[C$pms[cI]])) {
ploidy[k, sp] = as.double(dmx[C$pms[cI]])
} else {
toD = rbind(toD, thisAssigned)
}
}
}
}
toD[1:5,]
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
toD[1:5,]
uD=as.matrix(unique(toD));
uD
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[uD[i,"Idx"],sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
uD[i,"Idx"]
uD
as.data.frame(uD)
as.data.frame(uD)[1,1]
uD[i,"Idx"]
as.numeric(uD[i,"Idx"])
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
as.numeric(uD[i,"Idx"])
ploidy[as.numeric(uD[i,"Idx"]),]
sp
ploidy[as.numeric(uD[i,"Idx"]),sp]
round(median(as.numeric(allAssigned[ii,colName])))
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
for (i in 1:nrow(uD)){
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
i
ploidy[as.numeric(uD[i,"Idx"]),sp]
round(median(as.numeric(allAssigned[ii,colName])))
sp = paste("SP_", uD[i,"SP"], sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}
uD[i,"SP"]
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
for (i in 1:nrow(uD)){
sp = paste("SP_", as.numeric(uD[i,"SP"]), sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
sp = paste("SP_", as.numeric(uD[i,"SP"]), sep = "")
sp
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ii
ploidy[as.numeric(uD[i,"Idx"]),sp]
round(median(as.numeric(allAssigned[ii,colName])));
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
sp = paste("SP_", as.numeric(uD[i,"SP"]), sep = "")
if (!ambig){
ploidy[uD[i,"Idx"],sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
sp
i
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]
round(median(as.numeric(allAssigned[ii,colName])));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
colName=C$pms[1];
printErr=FALSE;
if(length(toD)>0){
rownames(toD)=c(1:nrow(toD))
colnames(toD)=c("Idx","SP","chr","startpos","endpos",colName)
colnames(allAssigned)=colnames(toD)
uD=as.matrix(unique(toD));
for (i in 1:nrow(uD)){
sp = paste("SP_", as.numeric(uD[i,"SP"]), sep = "")
if (!ambig){
ploidy[as.numeric(uD[i,"Idx"]),sp]=NA;
printErr=TRUE;
}else{
ii=which(as.numeric(uD[i,"SP"])==as.numeric(allAssigned[,"SP"]) &
as.numeric(uD[i,"chr"])==as.numeric(allAssigned[,"chr"]) &
as.numeric(uD[i,"startpos"])==as.numeric(allAssigned[,"startpos"]) &
as.numeric(uD[i,"endpos"])==as.numeric(allAssigned[,"endpos"]));
ploidy[as.numeric(uD[i,"Idx"]),sp]=round(median(as.numeric(allAssigned[ii,colName])));
}
}
}
